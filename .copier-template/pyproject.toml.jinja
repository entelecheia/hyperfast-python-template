[tool.poetry]
name = "{{ project_name }}"
version = "0.0.0"
description = "{{ project_short_description }}"
authors = ["{{ author }} <{{ email }}>"]
license = "{{ project_license }}"
homepage = "{{ documentation_url }}"
repository = "https://github.com/{{ github_username }}/{{ github_repo_name }}"
readme = "README.md"
{% if build_and_release -%}
packages = [{ include = "{{ package_name }}", from = "src" }]

{% if package_scripts -%}
[tool.poetry.scripts]
{% for script in package_scripts -%}
{{ script }}{{ "\n" if not loop.last }}
{%- endfor %}
{%- endif %}
{%- endif %}

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
click = "^8.1.3"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python-semantic-release = "^7.33.1"
isort = "^5.12.0"
black = ">=23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
flake8-pyproject = "^1.2.2"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"

{% if poe_task_files -%}
[tool.poe]
include = {{ poe_task_files|to_json }}
{%- endif %}

[tool.black]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  _version.py
  | .refs
  | .copier-template
  | tests
  | docs
  | book
  | _build
  | node_modules
)
'''

[tool.isort]
profile = "black"
skip = ['_version.py', 'node_modules', '_build', 'docs', 'tests', 'venv', '.copier-template', '.refs']

[tool.flake8]
ignore = ['F401', 'E501', 'W503']
exclude = ["node_modules", "_build", "docs", "tests", "venv", ".copier-template", ".refs"]
per-file-ignores = ['__init__.py:F401', '_version.py:W292']

[tool.mypy]
namespace_packages = true
exclude = ["node_modules", "build", "_build", "dist", "docs", "tests", "venv", ".copier-template", ".refs"]
# 3rd party import
ignore_missing_imports = true
# dynamic typing
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = true
disallow_any_generics = false
disallow_subclassing_any = true
# platform
python_version = "3.8"
# untyped
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# None and Optional
no_implicit_optional = true
# Warnings
warn_return_any = false
warn_unreachable = true
# Misc
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:cacheprovider" # deactivating pytest caching.

[tool.coverage.report]
exclude_lines = ['if __name__ == "__main__":']

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"

[tool.semantic_release]
branch = "main"
version_toml = "pyproject.toml:tool.poetry.version"
{% if build_and_release -%}
version_variable = "src/{{ package_name }}/_version.py:__version__"
{% endif -%}
version_source = "tag"
commit_version_number = true # required for version_source = "tag"
commit_subject = "chore(release): :rocket: {version} [skip ci]"
prerelease_tag = "rc"
major_on_zero = true
tag_commit = true
changelog_file = "CHANGELOG.md"
upload_to_repository = {{ upload_to_repository|to_json }}
upload_to_release = {{ upload_to_release|to_json }}
hvcs = "github" # hosting version control system, gitlab is also supported
{% if build_and_release -%}
build_command = "poetry build --no-cache"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{% else -%}
build_command = "mkdir -p dist && echo 'No build command configured' > dist/release.txt"
{%- endif %}
